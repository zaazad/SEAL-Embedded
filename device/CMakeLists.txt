#  Copyright (c) Microsoft Corporation. All rights reserved.
#  Licensed under the MIT License.

cmake_minimum_required (VERSION 3.13)

#####################################################################
#                  Start of configuration section                   #
#####################################################################

# -- 1. Local or on device
option(SE_BUILD_LOCAL "Build for native instead of device" ON)

# -- 2. If !local, m4 or a7 (on = m4)
option(SE_BUILD_M4 "Build for M4 instead of for A7" OFF)

# -- 3. If m4, azure sphere or nrf (on = sphere)
option(SE_M4_IS_SPHERE "Use Azure Sphere m4" OFF)

# -- This needs to be above the 'project' line
# -- Set these paths with paths for your setup
if(NOT SE_BUILD_LOCAL)
    if(SE_BUILD_M4 AND SE_M4_IS_SPHERE)
        # -- This path may need to be absolute
        set(ARM_GNU_PATH "/home/d/gcc-arm-none-eabi-10.3-2021.07/bin")
        set(CMAKE_TOOLCHAIN_FILE "/opt/azurespheresdk/CMakeFiles/AzureSphereRTCoreToolchain.cmake")
        # set(CMAKE_C_COMPILER "/opt/azurespheresdk/Sysroots/10/tools/sysroots/x86_64-pokysdk-linux/usr/bin/arm-poky-linux-musleabi/arm-poky-linux-musleabi-gcc")
    else()
        set(CMAKE_TOOLCHAIN_FILE "/opt/azurespheresdk/CMakeFiles/AzureSphereToolchain.cmake")
    endif()
endif()

project(SEAL_EMBEDDED VERSION 1.0.0 LANGUAGES C ASM)

#################
# Configuration #
#################

# Always build position-independent-code
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

# Set the directory that stores output files generated by SEAL-Embedded Adapter
set(SE_ADAPTER_FILE_OUTPUT_DIR ${CMAKE_CURRENT_LIST_DIR}/adapter_output_data CACHE STRING "Adapter file directory" FORCE)
message(STATUS "Adapter file directory: ${SE_ADAPTER_FILE_OUTPUT_DIR}")
if(NOT EXISTS ${SE_ADAPTER_FILE_OUTPUT_DIR}/sk_4096.dat OR
    NOT EXISTS ${SE_ADAPTER_FILE_OUTPUT_DIR}/index_map_4096.dat OR
    NOT EXISTS ${SE_ADAPTER_FILE_OUTPUT_DIR}/ifft_roots_4096.dat OR
    NOT EXISTS ${SE_ADAPTER_FILE_OUTPUT_DIR}/ntt_roots_4096_1071415297.dat OR
    NOT EXISTS ${SE_ADAPTER_FILE_OUTPUT_DIR}/ntt_roots_4096_1071513601.dat OR
    NOT EXISTS ${SE_ADAPTER_FILE_OUTPUT_DIR}/ntt_roots_4096_1072496641.dat)
    message(FATAL_ERROR "Run adapter first to generate key and precomputation data")
endif()

# -- 4. Build type
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Build type" FORCE)
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY
        STRINGS "Release" "Debug" "MinSizeRel" "RelWithDebInfo")
endif()
message(STATUS "Build type (CMAKE_BUILD_TYPE): ${CMAKE_BUILD_TYPE}")

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    # In Debug mode, enable extra compiler flags.
    include(CheckCXXCompilerFlag)
    # For easier adding of CXX compiler flags
    function(se_enable_cxx_compiler_flag_if_supported flag)
        string(FIND "${CMAKE_CXX_FLAGS}" "${flag}" flag_already_set)
        if(flag_already_set EQUAL -1)
            message(STATUS "Adding CXX compiler flag: ${flag} ...")
            check_cxx_compiler_flag("${flag}" flag_supported)
            if(flag_supported)
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${flag}" PARENT_SCOPE)
            endif()
            unset(flag_supported CACHE)
        endif()
    endfunction()
    if(NOT MSVC AND SEAL_DEBUG)
        se_enable_cxx_compiler_flag_if_supported("-Wall")
        se_enable_cxx_compiler_flag_if_supported("-Wextra")
        se_enable_cxx_compiler_flag_if_supported("-Wconversion")
        se_enable_cxx_compiler_flag_if_supported("-Wshadow")
        se_enable_cxx_compiler_flag_if_supported("-pedantic")
    endif()
endif()

# -- 5. Executable (tests or bench) or just library
if(NOT SE_BUILD_TYPE)
    set(SE_BUILD_TYPE "Tests" CACHE STRING "SEAL-Embedded build type" FORCE)
    set_property(CACHE SE_BUILD_TYPE PROPERTY
        STRINGS "Tests" "Bench" "Lib")
endif()
message(STATUS "Build type (SE_BUILD_TYPE): ${SE_BUILD_TYPE}")

if(NOT SE_BUILD_LOCAL AND (NOT SE_BUILD_M4 OR SE_M4_IS_SPHERE))
    azsphere_configure_tools(TOOLS_REVISION "21.07")

    # -- This means we are targetting one of the sphere targets
    # -- 6. Make sure to update these lines to latest versions
    if(SE_BUILD_M4)
        # -- 7. Set this path to the path to the OS_HAL folder on your setup
        set(OS_HAL_DIR_PATH "../../mt3620_m4_software/MT3620_M4_Sample_Code/OS_HAL")

        # -- 8. Set this path to the path to the Driver path in your setup
        set(MT3620_M4_DRIVER_PATH "../../mt3620_m4_software/MT3620_M4_Driver")

        set(MT3620_M4_BSP_PATH "../../mt3620_m4_software/MT3620_M4_BSP")
    else()
        azsphere_configure_api(TARGET_API_SET "10")
    endif()
endif()

if(NOT SE_BUILD_LOCAL AND NOT SE_BUILD_M4)
    # -- This means we are targetting the sphere a7
    # -- 9. Uncomment files corresponding to the desired config.
    set(RESOURCE_FILES
        # -- Secret key
        "${SE_ADAPTER_FILE_OUTPUT_DIR}/sk_4096.dat"

        # -- Public key
        "${SE_ADAPTER_FILE_OUTPUT_DIR}/pk0_ntt_4096_1071415297.dat"
        "${SE_ADAPTER_FILE_OUTPUT_DIR}/pk0_ntt_4096_1071513601.dat"
        "${SE_ADAPTER_FILE_OUTPUT_DIR}/pk0_ntt_4096_1072496641.dat"
        "${SE_ADAPTER_FILE_OUTPUT_DIR}/pk1_ntt_4096_1071415297.dat"
        "${SE_ADAPTER_FILE_OUTPUT_DIR}/pk1_ntt_4096_1071513601.dat"
        "${SE_ADAPTER_FILE_OUTPUT_DIR}/pk1_ntt_4096_1072496641.dat"

        # -- Index map
        "${SE_ADAPTER_FILE_OUTPUT_DIR}/index_map_4096.dat"

        # -- IFFT Roots
        "${SE_ADAPTER_FILE_OUTPUT_DIR}/ifft_roots_4096.dat"

        # -- Regular NTT roots
        "${SE_ADAPTER_FILE_OUTPUT_DIR}/ntt_roots_4096_1071415297.dat"
        "${SE_ADAPTER_FILE_OUTPUT_DIR}/ntt_roots_4096_1071513601.dat"
        "${SE_ADAPTER_FILE_OUTPUT_DIR}/ntt_roots_4096_1072496641.dat"

        # -- "Fast" NTT roots
        # "${SE_ADAPTER_FILE_OUTPUT_DIR}/ntt_fast_roots_4096_1071415297.dat"
        # "${SE_ADAPTER_FILE_OUTPUT_DIR}/ntt_fast_roots_4096_1071513601.dat"
        # "${SE_ADAPTER_FILE_OUTPUT_DIR}/ntt_fast_roots_4096_1072496641.dat"

        # ----------------------------------------
        # -- The following are for testing only --
        # ----------------------------------------

        # -- FFT Roots
        # "${SE_ADAPTER_FILE_OUTPUT_DIR}/fft_roots_4096.dat"

        # -- Regular INTT roots
        # "${SE_ADAPTER_FILE_OUTPUT_DIR}/intt_roots_4096_1071415297.dat"
        # "${SE_ADAPTER_FILE_OUTPUT_DIR}/intt_roots_4096_1071513601.dat"
        # "${SE_ADAPTER_FILE_OUTPUT_DIR}/intt_roots_4096_1072496641.dat"

        # -- "Fast" INTT roots
        # "${SE_ADAPTER_FILE_OUTPUT_DIR}/intt_fast_roots_4096_1071415297.dat"
        # "${SE_ADAPTER_FILE_OUTPUT_DIR}/intt_fast_roots_4096_1071513601.dat"
        # "${SE_ADAPTER_FILE_OUTPUT_DIR}/intt_fast_roots_4096_1072496641.dat"
    )
endif()

if(NOT SE_BUILD_LOCAL AND SE_BUILD_M4 AND SE_M4_IS_SPHERE) # On Sphere M4
    add_compile_definitions(OSAI_BARE_METAL)
    add_compile_definitions(OSAI_ENABLE_DMA)

    # When place CODE_REGION in FLASH instead of TCM, please enable this definition:
    add_compile_definitions(M4_ENABLE_XIP_FLASH)
    add_link_options(-specs=nano.specs -specs=nosys.specs)
    # add_link_options(-specs=nosys.specs)

    set(SPHERE_M4_SRC_FILES
        "${OS_HAL_DIR_PATH}/src/os_hal_uart.c"
        "${OS_HAL_DIR_PATH}/src/os_hal_gpio.c"
        "${OS_HAL_DIR_PATH}/src/os_hal_dma.c"
        "${OS_HAL_DIR_PATH}/src/os_hal_gpt.c"
        "${MT3620_M4_BSP_PATH}/printf/printf.c"
    )

    # add_subdirectory(../../../MT3620_M4_Driver ./lib/MT3620_M4_Driver)
    add_subdirectory(${MT3620_M4_DRIVER_PATH} ./MT3620_M4_Driver)
else()
    set(SPHERE_M4_SRC_FILES "")
endif()


#####################################################################
#                  End of configuration section                     #
#####################################################################

# -- CMPLX requires C11
set(C_STANDARD_REQUIRED ON)
set(CMAKE_C_STANDARD 11)

set_property(CACHE SE_BUILD_TYPE PROPERTY STRINGS "Lib" "Bench" "Tests")
message(STATUS "BUILD LOCAL (SE_BUILD_LOCAL): ${SE_BUILD_LOCAL}")
message(STATUS "CMAKE build type (CMAKE_BUILD_TYPE): ${CMAKE_BUILD_TYPE}")
message(STATUS "SEAL-Embedded build type (SE_BUILD_TYPE): ${SE_BUILD_TYPE}")


if(NOT SE_BUILD_LOCAL)
    message(STATUS "BUILD M4 (SE_BUILD_M4): ${SE_BUILD_M4}")
    if(SE_BUILD_M4)
        message(STATUS "IS SPHERE M4 (SE_M4_IS_SPHERE): ${SE_M4_IS_SPHERE}")
    endif()
endif()

if(SE_BUILD_LOCAL)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY  ${CMAKE_CURRENT_BINARY_DIR}/bin)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY  ${CMAKE_CURRENT_BINARY_DIR}/bin)
    set(CMAKE_LIBRARY_RUNTIME_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY  ${CMAKE_CURRENT_BINARY_DIR}/bin)
endif()

set(SE_LIB_SOURCE_FILES ${SPHERE_M4_SRC_FILES})
set(SE_BENCH_SOURCE_FILES ${SPHERE_M4_SRC_FILES})
set(SE_TESTS_SOURCE_FILES ${SPHERE_M4_SRC_FILES})

add_subdirectory(lib)
add_subdirectory(bench)
add_subdirectory(test)

set(CMAKE_ASM_FLAGS "${CMAKE_C_FLAGS} -x assembler-with-cpp")

# -- Set up the library
add_library(seal_embedded STATIC ${SE_LIB_SOURCE_FILES})
target_include_directories(seal_embedded PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/lib>)
target_include_directories(seal_embedded PUBLIC ${SE_ADAPTER_FILE_OUTPUT_DIR})

if(NOT SE_BUILD_LOCAL AND SE_BUILD_M4 AND SE_M4_IS_SPHERE)
    target_include_directories(seal_embedded PUBLIC ${OS_HAL_DIR_PATH}/inc)
    target_include_directories(seal_embedded PUBLIC ${MT3620_M4_DRIVER_PATH}/MHAL/inc)
    target_include_directories(seal_embedded PUBLIC ${MT3620_M4_BSP_PATH}/printf)
    target_link_libraries(seal_embedded PUBLIC MT3620_M4_Driver)
    target_link_libraries(seal_embedded PRIVATE m)
    set_target_properties(seal_embedded PROPERTIES LINK_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/linker.ld)
else()
    target_link_libraries(seal_embedded PRIVATE m)
endif()

set_target_properties(seal_embedded PROPERTIES VERSION ${SEAL_EMBEDDED_VERSION})
set_target_properties(seal_embedded PROPERTIES sealembedded seal_embedded-${SEAL_EMBEDDED_VERSION_MAJOR}.${SEAL_EMBEDDED_VERSION_MINOR})

# -- Always build the library. Optionally build the the executable.
if(SE_BUILD_TYPE STREQUAL "Bench")
    if(SE_BUILD_LOCAL)
        add_executable(seal_embedded_bench ${SE_BENCH_SOURCE_FILES})
        target_link_libraries(seal_embedded_bench PRIVATE m gcc c seal_embedded)
    else()
        add_executable(${PROJECT_NAME} ${SE_BENCH_SOURCE_FILES})
        if(SE_BUILD_M4)
            target_link_libraries(${PROJECT_NAME} PRIVATE MT3620_M4_Driver c m seal_embedded)
        else()
            target_link_libraries(${PROJECT_NAME} PRIVATE applibs gcc c  seal_embedded)
        endif()
    endif()
elseif(SE_BUILD_TYPE STREQUAL "Tests")
    if(SE_BUILD_LOCAL)
        add_executable(seal_embedded_tests ${SE_TESTS_SOURCE_FILES})
        target_link_libraries(seal_embedded_tests PRIVATE m gcc c seal_embedded)
    else()
        add_executable(${PROJECT_NAME} ${SE_TESTS_SOURCE_FILES})
        if(SE_BUILD_M4)
            target_include_directories(${PROJECT_NAME} PUBLIC ${MT3620_M4_BSP_PATH}/printf)
            target_link_libraries(${PROJECT_NAME} PUBLIC MT3620_M4_Driver c m seal_embedded)
        else()
            target_link_libraries(${PROJECT_NAME} PRIVATE applibs gcc c  seal_embedded)
        endif()
    endif()
else()
    message(STATUS "No executable will be built")
endif()

# -- Create an image on an Azure Sphere device
if(NOT SE_BUILD_LOCAL AND NOT (SE_BUILD_M4 AND NOT SE_M4_IS_SPHERE))
    set_target_properties(${PROJECT_NAME} PROPERTIES LINK_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/linker.ld)
    azsphere_target_add_image_package(${PROJECT_NAME} RESOURCE_FILES ${RESOURCE_FILES})
endif()

# -------------------------------
# --- Set defines for library ---
# -------------------------------
add_definitions(-DSE_DATA_PATH="${SE_ADAPTER_FILE_OUTPUT_DIR}")
string(LENGTH "${SE_ADAPTER_FILE_OUTPUT_DIR}" SE_ADAPTER_FILE_OUTPUT_DIR_LEN)
add_definitions(-DSE_DATA_PATH_LEN=${SE_ADAPTER_FILE_OUTPUT_DIR_LEN})

if(NOT SE_BUILD_LOCAL)
    if(SE_BUILD_M4)
        if(SE_M4_IS_SPHERE)
            add_definitions(-DSE_ON_SPHERE_M4)
        else()
            add_definitions(-DSE_ON_NRF5)
        endif()
    else()
        add_definitions(-DSE_ON_SPHERE_A7)
        add_definitions(-DSE_USE_ASM_ARITH)
    endif()
endif()

if(CMAKE_BUILD_TYPE STREQUAL "Release")
    add_definitions(-DSE_UNDEF_ASSERT_FORCE)
endif()
